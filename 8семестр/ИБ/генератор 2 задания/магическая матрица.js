//Магический квадрат для нечетных чисел с проверкой
//создаем функцию для магического квадрата, аргументом который будет размер матрицы
function magicSquare(n) {

    let matrix = [];
    let x = 0;

    //создадим переменную для позиции по вертикали - `y`
    let y = (n - 1) / 2;

    for (let i = 0; i < n; i++) {
      matrix[i] = [];
      for (let j = 0; j < n; j++) {
        matrix[i][j] = 0;
      }
    }

    for (let i = 0; i < n * n; i++) {
      pos(i + 1);
    }

    //функция с правилами заполнения, которой передается аргумент `value` равный квадрату размера матрицы
    function pos(value) {
      matrix[x][y] = value;
      let tx = x;
      let ty = y;
      //уменьшаем значение `x` на 1
      x--;
      //если значение `x` меньше нуля, то прибавляем к переменной `x` число равное размеру матрицы
      if (x < 0) {
        x += n;
      }
      //все тоже самое проделываем с переменной `y`
      y--;
      if (y < 0) {
        y += n;
      }
  
      //если число в ячейке не равно 0
      if (matrix[x][y] !== 0) {
        //то к переменной `tx` прибавляется 1 и сохраняется в переменной `x`
        x = tx + 1;
        //если переменная `x` равна размеру матрицы
        if (x === n) {
          //то x приравнивается к 0
          x = 0;
        }
        //`y` приравнивается к значению `ty`, т.е. "адресу" последнего числа
        y = ty;
      }
    }
    //по прохождению цикла заполнения чисел производится возврат заполненной "матрицы"
    return matrix;
  }
  
  //проверка является ли квадрат магическим
  function isMagicSquare(mat) {
    let N = mat.length;
    //`sumd1` и `sumd2` - сумма числе по диагоналям
    let sumd1 = 0,
      sumd2 = 0;
    for (let i = 0; i < N; i++) {
      // (i, i) - диагональ с верхнего левого угла до нижнего правого
      // (i, N - i - 1) - диагональ с верхнего правого до нижнего левого угла
      sumd1 = sumd1 + mat[i][i];
      sumd2 = sumd2 + mat[i][N - 1 - i];
    }
    // если две диагональные суммы не равны, то это не магический квадрат
    if (sumd1 != sumd2) return false;
  
    //аналогичная проверка для строк и столбцов
    for (let i = 0; i < N; i++) {
      let colSum = 0;
      let rowSum = 0;
      for (let j = 0; j < N; j++) {
        rowSum += mat[i][j];
        colSum += mat[j][i];
      }
      if (rowSum != colSum || colSum != sumd1) return false;
    }
    return true;
  }
  
  let oddNumber = 7;
  
  console.log(magicSquare(oddNumber));
  console.log(isMagicSquare(magicSquare(oddNumber)));